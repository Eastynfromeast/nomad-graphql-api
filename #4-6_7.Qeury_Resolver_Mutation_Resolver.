#4-6.Qeury Revolver
      GraphQL schema definition language
        any GraphQL server will understand it
        BUT depending on what programming language you are using the next step will be diffrent
        The logic will be the same which is called "Resolvers"

    type Query has a field called "allTweets",
    and we are going to write resolvers for the allTweets field

    When Apollo server call your resolver function, Apollo server gives root argument and arguments the function needs to your function!

    When user sends arguments, those arguments always be SECOND arguments, ALWAYS
    Root argument will be ALWAYS FIRST


#4-7.Mutation Revolver
  How to get query - the basic
        {
            allTweets{
                id
                text
            }
        }

    Mutation Resolver
        How to mutate - the basic
        Mutation: {
            postTweet(_, { text, userId }) {
                const newTweet = {
                    id: tweets.length + 1,
                    text,
                };
                tweets.push(newTweet);
                return newTweet;
            },
        },
        ex)
            mutation {
                postTweet(text:"I am NEW!", userId:"1"){
                    id
                    text
                }
            }

        Question?
            mutation 을 실험하기 위해 postTweet을 따라서 작성하고
            userId를 변경해서 postTweet을 작성했는데 기존 3번째 트윗이 사라지고 변경된 텍스트가 3번째 "업데이트" 됨
            why?!!!
            Answer is the database is only in-memory!
                현재 서버에서 저장되는 데이터베이스는 서버가 다시 실행되면 해당 코드 상단의 임의로 정의해준 const tweets 만 불러올 것
                ==> 우리가 실제 서버에 업데이트 하는 값이 아니기때문에 새로고침해서 날라갔다!
            {
                "data": {
                    "allTweets": [
                    //...
                    {
                        "id": "3", // userId를 "2"로 변경
                        "text": "I am the fourth"
                    },
                    {
                        "id": "4", // userId "1"
                        "text": "I am the fourth"
                    }
                    ]
                }
            }

    The division betweent query resolver and mutation resolver is conceptual, just to organize our code better